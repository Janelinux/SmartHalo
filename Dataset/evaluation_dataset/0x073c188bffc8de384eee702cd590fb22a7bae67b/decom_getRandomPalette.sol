function getRandomPalette(uint256 varg0) public payable { 

    require(4 + (msg.data.length - 4) - 4 >= 32);

    require(varg0 == varg0);

    v0 = v1 = new struct(8);

    v2 = v3 = 8;

    do {

        MEM[v0] = 96;

        v0 += 32;

        v2 = v2 - 1;

    } while (!v2);

    v0 = v4 = 0x22e(varg0);

    v0 = v5 = 0x1d5(48, 0, v4);

    v6 = v7 = 0;

    if (0 >= 5) {

        v8 = 0xe45(34);

        v9 = 0xe45(34);

        v10 = 0xe45(34);

        v11 = 0x24c4(v8, 32 + MEM[64]);

        MEM[v11 + 0] = 0x2c00000000000000000000000000000000000000000000000000000000000000;

        v12 = 0x24c4(v9, v11 + 1);

        MEM[v12 + 0] = 0x2c00000000000000000000000000000000000000000000000000000000000000;

        v13 = 0x24c4(v10, v12 + 1);

        MEM[MEM[64]] = v13 - MEM[64] - 32;

        v1.word5 = MEM[64];

        v14 = 0xe45(255);

        v15 = 0xe45(255);

        v16 = 0xe45(255);

        v17 = 0x24c4(v14, 32 + MEM[64]);

        MEM[v17 + 0] = 0x2c00000000000000000000000000000000000000000000000000000000000000;

        v18 = 0x24c4(v15, v17 + 1);

        MEM[v18 + 0] = 0x2c00000000000000000000000000000000000000000000000000000000000000;

        v19 = 0x24c4(v16, v18 + 1);

        MEM[MEM[64]] = v19 - MEM[64] - 32;

        v1.word6 = MEM[64];

        v6 = v20 = 0x22e(v4);

        v21 = v22 = 2964;

        MEM[MEM[64]] = 0xff0000;

        MEM[32 + MEM[64]] = 0xffff00;

        v23 = 0x1d5(2, 0, v20);

        require(uint32(v23) < 2, Panic(50));

        v24 = v25 = 0xffffff & MEM[(uint32(v23) << 5) + MEM[64]];

    } else {

        v21 = v26 = 2732;

        require(uint32(v5) < 48, Panic(50));

        require(0 < 5, Panic(50));

        v24 = uint32(STORAGE[0 + (uint32(v5) + 0)]);

    }

    v27 = 0xe45(uint32(v24) >> 16 & 0xff);

    v28 = 0xe45(uint32(v24) >> 8 & 0xff);

    v29 = 0xe45(v24 & 0xff);

    v30 = 0x24c4(v27, 32 + MEM[64]);

    MEM[v30 + 0] = 0x2c00000000000000000000000000000000000000000000000000000000000000;

    v31 = 0x24c4(v28, v30 + 1);

    MEM[v31 + 0] = 0x2c00000000000000000000000000000000000000000000000000000000000000;

    v32 = 0x24c4(v29, v31 + 1);

    MEM[MEM[64]] = v32 - MEM[64] - 32;

    v33 = v34 = MEM[64] + 96;

    v35 = v36 = v34 + 256;

    v37 = v38 = 0;

    while (v37 < 8) {

        MEM[v33] = v35 - v34;

        MEM[v35] = MEM[MEM[v0]];

        v39 = v40 = 0;

        while (v39 < MEM[MEM[v0]]) {

            MEM[v35 + 32 + v39] = MEM[MEM[v0] + 32 + v39];

            v39 = v39 + 32;

        }

        if (v39 > MEM[MEM[v0]]) {

            MEM[v35 + 32 + MEM[MEM[v0]]] = 0;

        }

        v35 = v35 + 32 + (MEM[MEM[v0]] + 31 & ~0x1f);

        v0 = v0 + 32;

        v33 = v33 + 32;

        v37 = v37 + 1;

    }

    return 96, uint32(v6), MEM[64];

}
