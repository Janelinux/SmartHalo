function createAcl(address varg0, address varg1, address varg2, uint256 varg3) public payable { 

    require(msg.data.length - 4 >= 128);

    require(varg0 == varg0);

    require(varg1 == varg1);

    require(varg2 == varg2);

    require(varg0, Error('Invalid target address'));

    require(varg1, Error('Invalid safe address'));

    require(varg2, Error('Invalid module address'));

    require(address(_contractToAclImplementation[address(varg0)]), Error('Invalid implementation address'));

    MEM[(32 + MEM[64]) len 1805] = 0x608060405260405161070d38038061070d8339810160408190526100229161030c565b61002e82826000610035565b5050610429565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d083836040518060600160405280602781526020016106e6602791396101a9565b9392505050565b6100ea8161028760201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61029660201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606001600160a01b0384163b6102115760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610148565b600080856001600160a01b03168560405161022c91906103da565b600060405180830381855af49150503d8060008114610267576040519150601f19603f3d011682016040523d82523d6000602084013e61026c565b606091505b50909250905061027d828286610299565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a85750816100d0565b8251156102b85782518084602001fd5b8160405162461bcd60e51b815260040161014891906103f6565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103035781810151838201526020016102eb565b50506000910152565b6000806040838503121561031f57600080fd5b82516001600160a01b038116811461033657600080fd5b60208401519092506001600160401b038082111561035357600080fd5b818501915085601f83011261036757600080fd5b815181811115610379576103796102d2565b604051601f8201601f19908116603f011681019083821181831017156103a1576103a16102d2565b816040528281528860208487010111156103ba57600080fd5b6103cb8360208301602088016102e8565b80955050505050509250929050565b600082516103ec8184602087016102e8565b9190910192915050565b60208152600082518060208401526104158160408501602087016102e8565b601f01601f19169190910160400192915050565b6102ae806104386000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b61009f565b565b606061004e8383604051806060016040528060278152602001610252602791396100c3565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e8080156100be573d6000f35b3d6000fd5b60606001600160a01b0384163b6101305760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b03168560405161014b9190610202565b600060405180830381855af49150503d8060008114610186576040519150601f19603f3d011682016040523d82523d6000602084013e61018b565b606091505b509150915061019b8282866101a5565b9695505050505050565b606083156101b457508161004e565b8251156101c45782518084602001fd5b8160405162461bcd60e51b8152600401610127919061021e565b60005b838110156101f95781810151838201526020016101e1565b50506000910152565b600082516102148184602087016101de565b9190910192915050565b602081526000825180602084015261023d8160408501602087016101de565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ff516df3dcbdce6369bc2442c33cd82282a13111eb5ad177f7186cd340522e8164736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564;

    MEM[(1837 + MEM[64] + 31 & ~0x1f) + 36] = varg1;

    MEM[(1837 + MEM[64] + 31 & ~0x1f) + 68] = varg2;

    MEM[MEM[64] + 32] = 0x485cc95500000000000000000000000000000000000000000000000000000000 | uint224(MEM[MEM[64] + 32]);

    MEM[MEM[64] + 32] = address(_contractToAclImplementation[address(varg0)]);

    MEM[MEM[64] + 32 + 32] = 64;

    MEM[MEM[64] + 32 + 64] = 100 + (1837 + MEM[64] + 31 & ~0x1f) - MEM[64] + ~31;

    v0 = v1 = 0;

    while (v0 < 100 + (1837 + MEM[64] + 31 & ~0x1f) - MEM[64] + ~31) {

        MEM[v0 + (MEM[64] + 32 + 64 + 32)] = MEM[v0 + (MEM[64] + 32)];

        v0 += 32;

    }

    MEM[100 + (1837 + MEM[64] + 31 & ~0x1f) - MEM[64] + ~31 + (MEM[64] + 32 + 64 + 32)] = 0;

    v2 = v3 = 0;

    while (v2 < 1805) {

        MEM[v2 + (64 + ((~0x1f & 31 + (100 + (1837 + MEM[64] + 31 & ~0x1f) - MEM[64] + ~31)) + (MEM[64] + 32 + 64)))] = MEM[v2 + (MEM[64] + 32)];

        v2 += 32;

    }

    MEM[1869 + ((~0x1f & 31 + (100 + (1837 + MEM[64] + 31 & ~0x1f) - MEM[64] + ~31)) + (MEM[64] + 32 + 64))] = 0;

    v4 = 64 + ((~0x1f & 31 + (100 + (1837 + MEM[64] + 31 & ~0x1f) - MEM[64] + ~31)) + (MEM[64] + 32 + 64)) + 1805;

    v5 = v6 = 0;

    while (v5 < v7) {

        MEM[v5 + v4] = MEM[v5 + (MEM[64] + 32)];

        v5 += 32;

    }

    MEM[v7 + v4] = 0;

    MEM[v7 + v4 + 32] = bytes20(varg1 << 96);

    MEM[v7 + v4 + 52] = bytes20(this << 96);

    MEM[v7 + v4 + 72] = varg3;

    v8 = new array[](104 + (v7 + v4) - v8 - 32);

    v9 = v8.length;

    v10 = v8.data;

    require(address(CREATE2(0x0, MEM[64] + 32, v7 + v4 - MEM[64] + ~31, keccak256(v8))), Error('Failed to create acl'));

    emit 0xa27487e67b892fcfb5366101e9ae4e7ae1859bccd6b3ef8ae5bc7a45c1cd1dc3(varg1, varg2, varg0, address(CREATE2(0x0, MEM[64] + 32, v7 + v4 - MEM[64] + ~31, keccak256(v8))));

    _aclsSize = 1 + _aclsSize.length;

    v11 = address(CREATE2(0x0, MEM[64] + 32, v7 + v4 - MEM[64] + ~31, keccak256(v8)));

    _aclsSize[_aclsSize.length] = v11 | bytes12(_aclsSize[_aclsSize.length]);

    _moduleContractToAcl[varg2][varg0] = v11 | bytes12(_moduleContractToAcl[address(varg2)][address(varg0)]);

    _aclToModule[v11] = varg2 | bytes12(_aclToModule[v11]);

    _aclToContract[v11] = varg0 | bytes12(_aclToContract[v11]);

    return address(CREATE2(0x0, MEM[64] + 32, v7 + v4 - MEM[64] + ~31, keccak256(v8)));

}
