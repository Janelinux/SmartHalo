```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

contract OptimizedToken {
    // State Variables
    mapping (address => uint256) public balance;  // //The name of the corresponding state variable before the modification: owner_2
    mapping (address => mapping (address => uint256)) public allowance; // //The name of the corresponding state variable before the modification: _allowance
    mapping (address => uint256) public reflectionBalances;  // //The name of the corresponding state variable before the modification: map_5
    mapping (address => uint256) public exemptFromFees; // //The name of the corresponding state variable before the modification: owner_6

    uint256 public totalSupply; // //The name of the corresponding state variable before the modification: stor_8
    uint256 public maxTxAmount; // //The name of the corresponding state variable before the modification: stor_10
    uint256 public maxWalletSize; // //The name of the corresponding state variable before the modification: stor_11

    address private _owner; // //The name of the corresponding state variable before the modification: _owner
    address private manualSwapAddress; // //The name of the corresponding state variable before the modification: _manualswap

    // Events
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Transfer(address indexed from, address indexed to, uint256 value);

    // Private Functions
    function calculateReflection(uint256 amount) private view returns (uint256) {
        // Assuming this function calculates reflections based on totalSupply
        return amount * totalSupply / totalSupply; // Simplified placeholder
    }

    function safeMultiply(uint256 a, uint256 b) private pure returns (uint256) {
        require(a == 0 || b <= type(uint256).max / a, "Arithmetic overflow");
        return a * b;
    }

    function safeAdd(uint256 a, uint256 b) private pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "Arithmetic overflow");
        return c;
    }

    function safeSub(uint256 a, uint256 b) private pure returns (uint256) {
        require(b <= a, "Arithmetic underflow");
        return a - b;
    }

    // Transfer functions
    function transfer(address recipient, uint256 amount) public returns (bool) {
        require(recipient != address(0), "Transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        
        uint256 senderBalance = balance[msg.sender];
        require(senderBalance >= amount, "Transfer amount exceeds balance");

        balance[msg.sender] = safeSub(senderBalance, amount);
        balance[recipient] = safeAdd(balance[recipient], amount);
        
        emit Transfer(msg.sender, recipient, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        require(sender != address(0), "Transfer from the zero address");
        require(recipient != address(0), "Transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        uint256 currentAllowance = allowance[sender][msg.sender];
        require(currentAllowance >= amount, "Transfer amount exceeds allowance");

        allowance[sender][msg.sender] = safeSub(currentAllowance, amount);
        transfer(recipient, amount);

        return true;
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        require(spender != address(0), "Approve to the zero address");
        allowance[msg.sender][spender] = amount;

        emit Approval(msg.sender, spender, amount);
        return true;
    }
}
```